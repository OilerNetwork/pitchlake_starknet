breaking a part the tests into more logical categories 


- vault_option_round_tests.cairo; this tests vault connection to option rounds
    - test vault deploys with rounds 0 and 1 correclty 
    - test start next option round only if current is settled 
    - test start next option round updates current & next by 1 

- vault_lp_tests.cairo; test lp entry points in vault
    - test deposit (first time & additional)
        - (lp nft minted or modified)
        - round contract balance goes up, lp's goes down
        - vault::roundPosition updates
    - test withdraw 
        - if current round < settled, use submit_claim 
            - check lp gets claim, vault::position updates, and re
    - test withdraw from current position
        - only when 



    - test submit claim
        - only if current.round is < settled, if settled, withdraw instead
    - test 


- option_round_ending_auction_tests
    - test place bid 
        - test ob balance goes up, option contract's goes down
    - test get unused bids of 
        - pre auction end (should be total bid deposit amount)
        - auction end (should be 0 or refundable amount)
   
    


- option_round_ending_round_tests.cairo 
    - test cannot end pre settlment time 
    - test can end once settlement time reached 
    - test payouts calculated (for ITM/ATM/OTM)
        - get total (0 pre settle, x post) 
        - get ob's (0 pre settle, 0 post)
    - test settle_round only if past option settle date 
    - test any claims submitted are processed 
    - test remaining liquidity + premiums transfer to next round 


vault core tests 
    CORE
    - vault type 
    - test current and next option round id's on deployment
    - test option round addresses 
        - test sets correctly for option round class hash
        - test if update to class hash of option round 
    LP ENTRY POINTS
    - test deposit (first time & additional)
        - test lp nft minted or modified 
        - test round contract balance goes up, lp's goes down
        - test vault::roundPosition updates
        - test get_lps_starting_liquidity_in_option_round (again in rolled over to round)
        - test 
    - test submit claim 
        - test fail if current == settled
        - test successful if current != settled & LP has a position 
        - test claim only created by lp for lp_id   
            - @note construct lp nft impl to use reusable nft condensing component, 
                this is erc721 that condenses nfts into a single nfts if transferred to wallet that already owns token.
                a -> b updates b and burns a
                b -> a updates a and burns b 
        - test claim goes to owner of lp, not claim creator (in case i submit claim then sell my position, buyer will receive payout)






